{"version":3,"sources":["node_modules/node-fetch/browser.js","helpers/endPoints.js","modules/cleanData.js","utils/convertToJSON.js","main.js"],"names":["getGlobal","self","window","global","Error","module","exports","fetch","default","bind","Headers","Request","Response","fetchAllData","endPoints","allEndpoints","map","endPoint","Promise","all","allowedColumns","mapDataSets","entry","newEntry","Object","entries","column","includes","filter","undefined","mergeDataSets","chargingPointData","geoLocationData","reduce","acc","cur","match","find","merged","filtered","push","changeToPlaceName","data","replace","restructureDataSets","json","convertToJSON","result","dataSetsToJson","dataSet","then","mappedResult","mergedData","changedData","console","log","catch","err"],"mappings":";AAAA,cAEA;AIFA;AJGA,IAAIA,SAAS,GAAG,YAAY;AIF5B,AJGC;AACA;AIHD,AJIC;ACLD,ADMC,AGPD,MHOK,OAAOC,IAAP,KAAgB,WAApB,EAAiC;AIHlC,AJGoC,AGN7B,ICGDa,ADHOgC,OHM8B7C,EIH5B,EJGqB,CIHlB,CAAC,ADHO,GAAG,SAAhB6C,aAAgB,CAACC,MAAD,EAAY,2BCGvB,EAChB,6DADgB,EAEhB,6DAFgB,CAAlB;AAKA,AJFkD,AGLhD,MAAIC,cAAc,GAAGD,MCOVjC,ADPgB,CAACE,GAAP,CAAW,ICOlC,EACCkC,IADD,ADPkCD,CCQ5B,MDRmC,ICQnCF,MAAM;AAAA,ADR6B,SCQzB,EDR6BE,OAAO,CAACJ,IAAR,EAAJ,kBCQXE,MAAd,CAAJ;AAAA,AJFX,AGNwC,CCOzC,EAECG,ADTsB,CAArB,EHMG,CICL,CAEM,KJHMhD,KIGN2C,CJHD,GIGK,EJHa,WAAtB,EAAmC;AIG1B,AJH4B,AGLpC,SCQY,ADRL3B,EHKoChB,KGL7B,CHKsB,AGLrBiB,GAAR,CAAY6B,cAAZ,ECQiBH,ADRWK,ICQvB,ADRL,CCQC,ADRgC,UAAAH,MAAM;ACQtC,AJH4C,AGLN,CCMhD,EAGCG,IAHD,CAGM,GDT8CH,MAAJ,CCS1CI,YAAY;AAAA,ADT8B,GAAvC,CAAP,KCSoB,8BAAcA,YAAd,CAAJ;AHTX,AGSW,AJHjB,AGLA,CCKD,ADRO,ECYND,CHVYrC,EDMR,CIAL,CAIM,KJJMV,GCNa,EGUnBiD,CJJD,KAAkB,IIIP,OJJf,EAAmC;ACNX,AGUT,AJJsB,SIIlB,EJJyBjD,MAAP,0BIIAiD,UAAlB,CAAJ,eHVY,iBAAOtC,SAAP;AAAA,AGUZ,AJJsC,CIAtD,EAKCoC,IALD,CAKO,UAAAG,WAAW;AHXU,AGWV,SAAIC,OAAO,CAACC,GAAR,CAAYF,WAAZ,CAAJ;AHXU,AGWV,AFdlB,AFUC,CIDD,EAMCG,KAND,AJCO,CIKA,GJLIpD,KAAJ,CAAU,CIKVqD,GAAG,4BJLH,CAAN;ACP2B,AGYlB,AFdV,AFUC,CARD,GEFMrC,KEcQkC,OAAO,CAACC,CFdF,EEcN,CAAY,AFdH,CACrB,QAD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","file":"main.js","sourceRoot":"..","sourcesContent":["\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar global = getGlobal();\n\nmodule.exports = exports = global.fetch;\n\n// Needed for TypeScript and Webpack.\nif (global.fetch) {\n\texports.default = global.fetch.bind(global);\n}\n\nexports.Headers = global.Headers;\nexports.Request = global.Request;\nexports.Response = global.Response;","// Fetch the database URL\r\nimport fetch from \"node-fetch\";\r\n\r\nexport const fetchAllData = async (endPoints) => {\r\n\r\n  const allEndpoints = endPoints.map(endPoint => fetch(endPoint));\r\n  return Promise.all(allEndpoints);\r\n\r\n};","// Filter all data sets by these columns\r\nconst allowedColumns = [\r\n  'areaid',\r\n  'chargingpointcapacity',\r\n  'areageometryastext',\r\n  'capacity',\r\n  'areadesc'\r\n];\r\n\r\n// Filter allowed columns from data sets\r\nexport const mapDataSets = (endPoints) => {\r\n  // console.log(endPoints);\r\n  // Loop through the available data sets\r\n  return endPoints.map(endPoint => {\r\n\r\n    // Loop through each entry of the data set\r\n    return endPoint.map(entry => {\r\n\r\n      // Loop over each object from an endPoint\r\n      let newEntry = Object.entries(entry).map(column => {\r\n\r\n\r\n        // Check if the key doesn't match one of the allowed columns\r\n        if(!allowedColumns.includes(column[0])) {\r\n          delete column[0];\r\n          delete column[1];\r\n\r\n        } else {\r\n\r\n          return column;\r\n\r\n        }\r\n\r\n      });\r\n\r\n      // Return all entries that are not undefined\r\n      return newEntry.filter(entry => entry !== undefined);\r\n\r\n\r\n    });\r\n\r\n  });\r\n\r\n};\r\n\r\n\r\n// Merge both data sets into one data set.\r\nexport const mergeDataSets = (endPoints) => {\r\n\r\n  const chargingPointData = endPoints[0];\r\n  const geoLocationData = endPoints[2];\r\n  // const geoLocationData = endPoints[2];\r\n\r\n  return chargingPointData.reduce((acc, cur) => {\r\n\r\n    // Check if there is a match between the two entries\r\n    const match = geoLocationData.find(entry => entry[0][1].includes(cur[0][1]));\r\n\r\n    if(match) {\r\n\r\n      // Merge entry of chargingPointData with entry of geoLocationData\r\n      let merged = [...cur, ...match];\r\n\r\n      // Delete the double entry\r\n\r\n      // If entry is areaid delete it.\r\n      if (merged[0][0] === \"areaid\") {\r\n        delete merged[0];\r\n      }\r\n\r\n      let filtered = merged.filter(entry => entry !== undefined);\r\n\r\n      // Push to Accumulator\r\n      acc.push(filtered);\r\n\r\n\r\n    }\r\n\r\n    return acc;\r\n\r\n  }, []);\r\n\r\n};\r\n\r\n\r\n\r\nexport const changeToPlaceName = (data) => {\r\n\r\n  return data.map(entry => {\r\n    return entry.map(column => {\r\n      // console.log('entry=' ,column);\r\n\r\n      if (column[0] === 'areadesc') {\r\n\r\n        column[0] = 'location';\r\n\r\n        // https://stackoverflow.com/questions/6208367/regex-to-match-stuff-between-parentheses\r\n        // trim everything before first and after last parenthesis\r\n        column[1] = column[1].replace(/^[^(]*\\(/, \"\")\r\n                             .replace(/\\)[^(]*$/, \"\");\r\n      }\r\n\r\n      return column;\r\n    });\r\n\r\n  })\r\n\r\n};\r\n\r\n// Restructure both Datasets\r\nexport const restructureDataSets = (json) => {\r\n\r\n  // -- 0:{ areaid: '', charginpoint: '', geoloc: ''}\r\n\r\n};\r\n\r\n","// Loop through endPoints, convert them to JSON\r\nexport const convertToJSON = (result) => {\r\n  let dataSetsToJson = result.map(dataSet => dataSet.json());\r\n  return Promise.all(dataSetsToJson).then(result => result);\r\n};\r\n","import { fetchAllData } from \"./helpers/endPoints.js\";\r\nimport { mapDataSets, mergeDataSets, changeToPlaceName } from \"./modules/cleanData.js\";\r\nimport { convertToJSON } from \"./utils/convertToJSON.js\";\r\n\r\nconst endPoints = ['https://opendata.rdw.nl/resource/b3us-f26s.json?$limit=5000',\r\n  'https://opendata.rdw.nl/resource/nsk3-v9n7.json?$limit=7000',\r\n  'https://opendata.rdw.nl/resource/t5pc-eb34.json?$limit=7000'];\r\n\r\n\r\nfetchAllData(endPoints)\r\n.then(result => convertToJSON(result))\r\n.then(json => mapDataSets(json))\r\n.then(mappedResult => mergeDataSets(mappedResult))\r\n.then(mergedData => changeToPlaceName(mergedData))\r\n.then( changedData => console.log(changedData))\r\n.catch(err => console.log(\"FetchError - \", err));\r\n\r\n\r\n"]}